/*
 * Dashboards API
 *
 * API for creating, retrieving, updating, and deleting dashboards and dashboard groups. <br> Dashboards are groups of charts. In a dashboard, all the charts that belong to the dashboard appear at the same time and follow the same filtering options. ## Dashboard layout The system lays out dashboards and the charts they contain with these dimensions: <br>   * The web UI reserves a 12x100 grid for each dashboard and assigns one or     more charts to specific locations within the grid.   * A chart associated with the dashboard can be any size from 1x1 to 12x3.   * If you assign overlapping dashboard locations for charts, the system     attempts to resize or reorganize the layout. This ensures that all     of the charts fit within the space alloted to the dashboard.  ## Dashboard access By default, all users in an organization can edit and delete dashboards and dashboard groups. If SignalFx has enabled the \"write permissions\" feature for your organization, you can limit editing or deleting of specific dashboards to specific individuals or teams, or both. Use this feature to prevent unauthorized or accidental modifications to dashboards and the charts they contain. ## Cloning dashboards Users who don't have permission to edit a dashboard can still clone it and modify the clone. ## View dashboards You can view dashboards you create using the API in the web UI by specifying their \"id\" property in a web UI URL, by following this syntax: <br> <code>https://app.signalfx.com/#/dashboard/&lt;DASHBOARD_ID&gt;</code> <br> Dashboards you create using the API also appear by name in the web UI catalog and in their dashboard group.
 *
 * API version: 3.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dashboard

import "github.com/signalfx/signalfx-go/util"

// Time range to show in all of the charts in the dashboard. The specifications in this object override those in each individual chart. If you don't specify values, the system defaults to using the individual time setting for each chart.
type ChartsFiltersTime struct {
	// The end of the time range to show for all charts in the dashboard. If you don't specify a value for this property, the system defaults to the value for each chart's `end` property.<br> **Note:** The specified type for `end` is `string`, but the system also accepts a 64-bit signed integer that represents a time in Unix time format (milliseconds since the Unix epoch UTC+0)
	End util.StringOrInteger `json:"end,omitempty"`
	// The start of the time range to show for all charts in the dashboard. If you don't specify a value for this property, the system defaults to the value for each chart's `start` property.<br> **Note:** The specified type for `start` is `string`, but the system also accepts a 64-bit signed integer that represents a time in Unix time format (milliseconds since the Unix epoch UTC+0)
	Start util.StringOrInteger `json:"start,omitempty"`
}
